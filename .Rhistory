hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col = "purple1")
abline(v = mean(df.grp$x, na.rm = TRUE), col=2, lty=2, lwd=2)
text(3.5, 0.1, "cutoff", col = "red")
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col = "purple1")
abline(v = mean(df.grp$x, na.rm = TRUE), col=2, lty=2, lwd=2)
text(5, 10, "cutoff", col = "red")
text(5, 30, "cutoff", col = "red")
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col = "purple1")
abline(v = mean(df.grp$x, na.rm = TRUE), col=2, lty=2, lwd=2)
text(5, 30, "cutoff", col = "red")
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col = "purple1")
abline(v = mean(df.grp$x, na.rm = TRUE), col=2, lty=2, lwd=2)
text(25, 25, "cutoff", col = "red")
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col = "purple1")
abline(v = mean(df.grp$x, na.rm = TRUE), col=2, lty=2, lwd=2)
text(125, 25, "cutoff", col = "red")
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col = "purple1")
abline(v = mean(df.grp$x, na.rm = TRUE), col=2, lty=2, lwd=2)
mtext("cutoff", side = 3)
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col = "purple1")
abline(v = mean(df.grp$x, na.rm = TRUE), col=1, lty=2, lwd=2)
mtext("mean", side = 3)
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col = "purple1")
abline(v = mean(df.grp$x, na.rm = TRUE), col=1, lty=2, lwd=2)
mtext("Dotted line -> mean of " +mean(df.grp$x), side = 3)
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col = "purple1")
abline(v = mean(df.grp$x, na.rm = TRUE), col=1, lty=2, lwd=2)
mtext("Dotted line -> mean of ", side = 3)
print(mean(df.grp$x, na.rm = TRUE))
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col = "purple1")
abline(v = mean(df.grp$x, na.rm = TRUE), col=1, lty=2, lwd=2)
mtext("Dotted line highlights mean of " + print(mean(df.grp$x, na.rm = TRUE)), side = 3)
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col = "purple1")
abline(v = mean(df.grp$x, na.rm = TRUE), col=1, lty=2, lwd=2)
mtext("Dotted line highlights mean of 10,766 steps per day", side = 3)
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col = "purple1")
abline(v = mean(df.grp$x, na.rm = TRUE), col="orange1", lty=2, lwd=2)
mtext("Dotted line highlights mean of 10,766 steps per day", side = 3)
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col = "orange2")
abline(v = mean(df.grp$x, na.rm = TRUE), col=1, lty=2, lwd=2)
mtext("Dotted line highlights mean of 10,766 steps per day", side = 3)
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col ="yellow3")
abline(v = mean(df.grp$x, na.rm = TRUE), col=1, lty=2, lwd=2)
mtext("Dotted line highlights mean of 10,766 steps per day", side = 3)
##  What is the mean total number of steps taken per day?
##  1. Make a histogram of the total number of steps taken each day
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col ="yellow4")
abline(v = mean(df.grp$x, na.rm = TRUE), col=1, lty=2, lwd=2)
mtext("Dotted line highlights mean of 10,766 steps per day", side = 3)
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col ="green4")
abline(v = mean(df.grp$x, na.rm = TRUE), col=1, lty=2, lwd=2)
mtext("Dotted line highlights mean of 10,766 steps per day", side = 3)
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col ="green6")
abline(v = mean(df.grp$x, na.rm = TRUE), col=1, lty=2, lwd=2)
mtext("Dotted line highlights mean of 10,766 steps per day", side = 3)
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col ="green5")
abline(v = mean(df.grp$x, na.rm = TRUE), col=1, lty=2, lwd=2)
mtext("Dotted line highlights mean of 10,766 steps per day", side = 3)
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col ="gree25")
abline(v = mean(df.grp$x, na.rm = TRUE), col=1, lty=2, lwd=2)
mtext("Dotted line highlights mean of 10,766 steps per day", side = 3)
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col ="green2")
abline(v = mean(df.grp$x, na.rm = TRUE), col=1, lty=2, lwd=2)
mtext("Dotted line highlights mean of 10,766 steps per day", side = 3)
View(y)
daily <- ddply(activity, "interval", summarise,
mean.steps = mean(steps, na.rm = TRUE),
median.steps = median(steps, na.rm = TRUE))
plot(daily$mean.steps, type = "l")
View(daily)
library(plyr)
library(knitr)
library(lubridate)
library(plyr)
library(knitr)
library(lubridate)
dd <- data.frame(year = as.integer(c(2007,2007)),
doy =  as.integer(c(156,156)),
HHMM = as.integer(c(1200,1200)),
var = as.numeric(c(11.2,11.2)))
View(dd)
str(dd)
dd[,1] <- as.character(dd[,1])
str(dd)
dd[,2] <- as.character(dd[,2])
dd[,3] <- as.character(dd[,3])
str(dd)
dd$time1 <- with(dd, as.POSIXct(paste(year, doy, HHMM), format = "%Y %j %H%M"))
View(dd)
View(daily)
View(activity)
activity$interval <- as.character(activity$interval)
View(activity)
activity$interval <- with(activity, as.POSIXct(paste(interval), format = "%H%M"))
times <- c(2200, 2300)
time
times
as.character(times)
mytime <- strptime(times, format = "%H%M")
mytime
library("chron", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("strftime")
daily <- ddply(activity, "interval", summarise,
mean.steps = mean(steps, na.rm = TRUE),
median.steps = median(steps, na.rm = TRUE))
plot(daily$mean.steps, type = "l")
mytime <- strptime(times, format = "%H%M")
mytime
times <- c(2200, 2300, 2205, 2210, 100)
as.character(times)
mytime <- strptime(times, format = "%H%M")
mytime
activity <- read.csv("activity.csv", header = TRUE, stringsAsFactors = FALSE)
activity$date <- as.Date(activity$date, "%Y-%m-%d")
activity$interval <- as.character(activity$interval)
View(activity)
times <- c("0", "5", "10", "15", "20", "100", "105", "1000", "1005")
d <- parse_date_time(times, names(guess_formats(dates, c("H!M!"))))
times <- c(0, 5, 10, 15, 100, 105, 1000, 1005)
d <- parse_date_time(times, names(guess_formats(dates, c("H!M!"))))
detach(cron)
detach("package:chron", unload=TRUE)
library(lubridate)
times <- c(0, 5, 10, 15, 100, 105, 1000, 1005)
d <- parse_date_time(times, names(guess_formats(dates, c("H!M!"))))
d <- parse_date_time(times, names(guess_formats(times, c("H!M!"))))
guess_formats(0, c("H!M!"))
guess_formats("0", c("H!M!"))
x <- c('February 20th 1973',
"february 14, 2004",
"Sunday, May 1, 2000",
"Sunday, May 1, 2000",
"february 14, 04",
'Feb 20th 73',
"January 5 1999 at 7pm",
"jan 3 2010",
"Jan 1, 1999",
"jan 3 10",
"01 3 2010",
"1 3 10",
'1 13 89',
"5/27/1979",
"12/31/99",
"DOB:12/11/00",
"-----------",
'Thu, 1 July 2004 22:30:00',20 here
'Thu, 1st of July 2004 at 22:30:00',
'Thu, 1July 2004 at 22:30:00',
'Thu, 1July2004 22:30:00',
'Thu, 1July04 22:30:00',
"21 Aug 2011, 11:15:34 pm",
"-----------",
"1979-05-27 05:00:59",
"1979-05-27",
"-----------",
"3 jan 2000",
"17 april 85",
"27/5/1979",
'20 01 89',
'00/13/10',
"-------",
"14 12 00",
"03:23:22 pm")
install.packages("strftime")
install.packages("raw2tact")
mytime <- strptime(times, format = "%H%M")
d <- hm("14:35")
d
d <- hm("1435")
v <- c("0", "5", "10")
"0" + "00:"
activity <- read.csv("activity.csv", header = TRUE, stringsAsFactors = FALSE)
activity$date <- as.Date(activity$date, "%Y-%m-%d")
activity$interval <- as.character(activity$interval)
View(activity)
library(stringr)
times <- ("0", "5")
times <- c("0", "5")
nchar(times)
paste(1:12)
paste("A", 1:6, sep = "")
x = data.frame(cbind(f1 = c(1,2,3), f2 = c(5,6,7), f3=c(11,22,33)), row.names= c('a','b','c'))
x
df3 <- data.frame(x=c(1:10),y=c(5:14),z=c(25:34))
df3
df3$xyz <- with(df3, paste(x,y,z, sep=""))
df3
df <- data.frame(date <- c("2012-10-01", "2012-10-02"), time <- c("00:00", "00:05"))
df
View(df)
df <- data.frame(date = c("2012-10-01", "2012-10-02"), time = c("00:00", "00:05"))
View(df)
str(df)
date <- as.character(c("2012-10-01", "2012-10-02"))
date
str(date)
str(df)
time <- as.character(c("00:00", "00:05"))
time
x <- data.frame(date,time)
x
str(x)
x$datetime <- with(x, paste(date, time, sep=" "))
x
str(x)
xnew <- x
xnew
strptime(xnew$datetime, "%Y-%m-%d %H:%M")
str(xnew)
xnew$datetime <- strptime(xnew$datetime, "%Y-%m-%d %H:%M")
str(xnew$datetime)
str(xnew)
xnew$datetime <- as.POSIXct(strptime(xnew$datetime, "%Y-%m-%d %H:%M"))
str(xnew)
minute(xnew$datetime)
lt <- as.POSIXlt("2010-10-18 21:46:53")
library(chron)
tt1 <- times(format(lt, "%H:%M")); tt1
detach("package:chron", unload=TRUE)
detach("package:lubridate", unload=TRUE)
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
dd = data.frame(date = as.Date(c("2014-04-29", "2014-04-29","2014-04-29", "2014-04-29", "2014-04-29", "2014-04-29"), format ="%Y-%m-%d"), hh = 1:6, mm = seq(0, 50, 10))
View(dd)
dd$time1 <- with(dd, hm(paste(hh, mm, sep=":")))
View(dd)
str(dd)
dd = data.frame(date = as.Date(c("2014-04-29", "2014-04-29","2014-04-29", "2014-04-29", "2014-04-29", "2014-04-29"), format ="%Y-%m-%d"), hh = 0:5, mm = seq(0, 50, 10))
dd$time1 <- with(dd, hm(paste(hh, mm, sep=":")))
dd
plot(dd$time1, type = "l")
activity <- read.csv("activity.csv", header = TRUE, stringsAsFactors = FALSE)
activity$date <- as.Date(activity$date, "%Y-%m-%d")
activity$interval <- as.character(activity$interval)
View(activity)
hm(interval)
str(activity)
str <- c("Regular", "expression", "examples of R language")
x <- sub("x.ress","",str)
x
str
x <- sub("x.ress"," ",str)
x
chartr(old=”0”,new=”00”,word)
word = "0"
chartr(old=”0”,new=”00”,word)
word = "Apple"
chartr(old=”A”,new=”a”,word)
time <- c("00", "100", "200")
time <- hm(time)
time
time <- c("0000", "0100", "0200")
time <- hm(time)
time
dd = data.frame(date = as.Date(c("2014-04-29", "2014-04-29","2014-04-29", "2014-04-29", "2014-04-29", "2014-04-29"), format ="%Y-%m-%d"), hh = 1:6, mm = seq(0, 50, 10))
dd
str(dd)
dd$hh <- as.character(dd$hh)
str(dd)
dd$mm <- as.character(dd$mm)
str(dd)
dd$time1 <- with(dd, hm(paste(hh, mm, sep=":")))
dd
str(dd)
dd = data.frame(date = as.Date(c("2014-04-29", "2014-04-29","2014-04-29", "2014-04-29", "2014-04-29", "2014-04-29"), format ="%Y-%m-%d"), hh = 18:23, mm = seq(0, 50, 10))
dd$time1 <- with(dd, hm(paste(hh, mm, sep=":")))
dd
dd
dd = data.frame(date = as.Date(c("2014-04-29", "2014-04-29","2014-04-29", "2014-04-29", "2014-04-29", "2014-04-29"), format ="%Y-%m-%d"), hh = seq(0,16, 4), mm = seq(0, 50, 10))
dd = data.frame(date = as.Date(c("2014-04-29", "2014-04-29","2014-04-29", "2014-04-29", "2014-04-29", "2014-04-29"), format ="%Y-%m-%d"), hh = seq(0,20, 4), mm = seq(0, 50, 10))
dd
str(dd)
dd$hh <- as.character(dd$hh)
dd$mm <- as.character(dd$mm)
dd
str(dd)
test = data.frame(interval = seq(0, 1300, 50))
test
test[, "hour"] <- NA
test[, "minute"] <- NA
test
str(test)
test$interval <- as.character(test$interval)
str(test)
grep("a+", c("abc", "def", "cba a", "aa"), perl=TRUE, value=TRUE)
shopping_list <- c("bread & Apples §$%&/()=?4", "flouR", "sugar", "milk x2")
str_extract(shopping_list, "[A-Z].*[1-9]")
##  Insrall necessary libraries
library(plyr)
library(knitr)
library(lubridate)
library(stringr)
#  Load and preprocess the data
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",
destfile="data.zip", method="curl")
unzip("data.zip")
activity <- read.csv("activity.csv", header = TRUE, stringsAsFactors = FALSE)
activity$date <- as.Date(activity$date, "%Y-%m-%d")
activity$interval <- as.character(activity$interval)
df.grp <- aggregate(activity$steps, by=list(activity$date), FUN = "sum")
##  What is the mean total number of steps taken per day?
##  1. Make a histogram of the total number of steps taken each day
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col ="green2")
abline(v = mean(df.grp$x, na.rm = TRUE), col=1, lty=2, lwd=2)
mtext("Dotted line highlights mean of 10,766 steps per day", side = 3)
##  2. Calculate and report the mean and median total number of steps taken per day
print(mean(df.grp$x, na.rm = TRUE))
print(median(df.grp$x, na.rm = TRUE))
##  3. What is the average daily activity pattern?
##  x - axis = 5 min interval
##  y - axis = the avg number of steps taken, averaged across all days
daily <- ddply(activity, "interval", summarise,
mean.steps = mean(steps, na.rm = TRUE),
median.steps = median(steps, na.rm = TRUE))
plot(daily$mean.steps, type = "l")
View(daily)
airquality()
airquality
head(airquality)
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
View(daily)
View(daily)
plot(daily$interval,daily$mean.steps, type = "l")
plot(daily$mean.steps, type = "l")
str(daily)
daily$interval <- as.integer(daily$interval)
str(daily)
plot(daily$mean.steps, type = "l")
steps.date <- aggregate(steps ~ date, data = activity, FUN = sum)
barplot(steps.date$steps, names.arg = steps.date$date, xlab = "date", ylab = "steps")
steps.interval <- aggregate(steps ~ interval, data = activity, FUN = mean)
View(steps.interval)
daily <- aggregate(steps ~ interval, data = activity, FUN = mean)
View(daily)
daily <- aggregate(steps ~ interval, data = activity, FUN = mean)
plot(daily, type = "l")
##  Insrall necessary libraries
library(plyr)
library(knitr)
library(lubridate)
library(stringr)
#  Load and preprocess the data
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",
destfile="data.zip", method="curl")
unzip("data.zip")
activity <- read.csv("activity.csv", header = TRUE, stringsAsFactors = FALSE)
activity$date <- as.Date(activity$date, "%Y-%m-%d")
activity$interval <- as.character(activity$interval)
df.grp <- aggregate(activity$steps, by=list(activity$date), FUN = "sum")
##  What is the mean total number of steps taken per day?
##  1. Make a histogram of the total number of steps taken each day
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col ="green2")
abline(v = mean(df.grp$x, na.rm = TRUE), col=1, lty=2, lwd=2)
mtext("Dotted line highlights mean of 10,766 steps per day", side = 3)
##  2. Calculate and report the mean and median total number of steps taken per day
print(mean(df.grp$x, na.rm = TRUE))
print(median(df.grp$x, na.rm = TRUE))
daily <- aggregate(steps ~ interval, data = activity, FUN = mean)
plot(daily, type = "l")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",
destfile="data.zip", method="curl")
unzip("data.zip")
activity <- read.csv("activity.csv")
df.grp <- aggregate(activity$steps, by=list(activity$date), FUN = "sum")
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col ="green2")
abline(v = mean(df.grp$x, na.rm = TRUE), col=1, lty=2, lwd=2)
mtext("Dotted line highlights mean of 10,766 steps per day", side = 3)
print(mean(df.grp$x, na.rm = TRUE))
print(median(df.grp$x, na.rm = TRUE))
daily <- aggregate(steps ~ interval, data = activity, FUN = mean)
plot(daily, type = "l")
save.image("~/Documents/RStats/Coursera/RepData_PeerAssessment1/Untitled.RData")
hist(activity.grp$x, main = "A Distribution for Total Steps Taken Each Day", xlab = "Total number of steps taken each day", col = "green2")
daily <- aggregate(steps ~ interval, data = activity, FUN = mean)
plot(daily, type = "l", xlab = "5 minute intervals over a 24 hour period", ylab = "average number of steps taken",
main = "The daily activity pattern for the average number of steps per 5 minute interval")
daily <- aggregate(steps ~ interval, data = activity, FUN = mean)
plot(daily, type = "l", xlab = "5 minute intervals over a 24 hour period", ylab = "Average number of steps taken",
main = "The daily activity pattern for the average number of steps per 5 minute interval", col = "green2")
daily <- aggregate(steps ~ interval, data = activity, FUN = mean)
plot(daily, type = "l", xlab = "5 minute intervals over a 24 hour period", ylab = "Average number of steps taken",
main = "The daily activity pattern for the average number of steps per 5 minute interval", col = "purple3")
2880/60
View(daily)
2400/60
max(daily$steps)
daily[max(daily$steps), ]
daily[,max(daily$steps) ]
x <- c(1:4, 0:5, 11)
x
which.max(x)
which.max(daily$steps)
max(daily$steps)
daily$interval[which.max(daily$steps)]
sapply(activity, function(x) sum(is.na(x)))
newActivity <- aggregate(steps ~ date, data = activity, steps = impute.median(steps))
impute.median <- function(x) replace(x, is.na(x), median(x, na.rm = TRUE))
newActivity <- ddply(activity, ~ interval, transform, steps = impute.median(steps))
View(newActivity)
View(newActivity)
impute.median <- function(x) replace(x, is.na(x), median(x, na.rm = TRUE))
##  First calculate the median and list it in the
medianCalc <- ddply(activity, ~ interval, transform, steps = impute.median(steps))
View(medianCalc)
View(activity)
View(newActivity)
newActivity <- ddply(activity, ~ interval, transform, steps = impute.median(steps))
#newActivity <- newActivity[order(newActivity$date), ]
new.df.grp <- aggregate(newActivity$steps, by=list(newActivity$date), FUN = "sum")
hist(new.df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col ="green2")
abline(v = mean(new.df.grp$x, na.rm = TRUE), col=1, lty=2, lwd=2)
mtext("Dotted line highlights mean of 10,766 steps per day", side = 3)
View(new.df.grp)
print(mean(new.df.grp$x, na.rm = TRUE))
print(median(new.df.grp$x, na.rm = TRUE))
View(daily)
View(newActivity)
View(df.grp)
View(new.df.grp)
activity <- read.csv("activity.csv")
df.grp <- aggregate(activity$steps, by=list(activity$date), FUN = "sum")
##  What is the mean total number of steps taken per day?
##  1. Make a histogram of the total number of steps taken each day
hist(df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col ="green2")
abline(v = mean(df.grp$x, na.rm = TRUE), col=1, lty=2, lwd=2)
mtext("Dotted line highlights mean of 10,766 steps per day", side = 3)
##  2. Calculate and report the mean and median total number of steps taken per day
print(mean(df.grp$x, na.rm = TRUE))
print(median(df.grp$x, na.rm = TRUE))
##  3. What is the average daily activity pattern?
##  x - axis = 5 min interval
##  y - axis = the avg number of steps taken, averaged across all days
daily <- aggregate(steps ~ interval, data = activity, FUN = mean)
plot(daily, type = "l", xlab = "5 minute intervals over a 24 hour period", ylab = "Average number of steps taken",
main = "Activity pattern for the avg number of steps per 5 minute interval", col = "purple3")
##daily <- ddply(activity, "interval", summarise,
##           mean.steps = mean(steps, na.rm = TRUE),
##           median.steps = median(steps, na.rm = TRUE))
##plot(daily$mean.steps, type = "l")
daily$interval[which.max(daily$steps)]
##  Imputing missing values
##  1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
sapply(activity, function(x) sum(is.na(x)))
##  2 -3  Devise a strategy for filling in the missing values and create the dataset
##  I will use the mean for the 5 minute interval and replace the NA with that mean
impute.median <- function(x) replace(x, is.na(x), median(x, na.rm = TRUE))
newActivity <- ddply(activity, ~ interval, transform, steps = impute.median(steps))
#newActivity <- newActivity[order(newActivity$date), ]
new.df.grp <- aggregate(newActivity$steps, by=list(newActivity$date), FUN = "sum")
hist(new.df.grp$x, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total number of steps taken each day", col ="green2")
abline(v = mean(new.df.grp$x, na.rm = TRUE), col=1, lty=2, lwd=2)
mtext("Dotted line highlights mean of 10,766 steps per day", side = 3)
newY <- ddply(newActivity, "interval", summarise,
mean.steps = mean(steps, na.rm = TRUE),
median.steps = median(steps, na.rm = TRUE))
View(newActivity)
sum(is.na(activity))
sum(is.na(newActivity))
sum(is.na(activity))
newActivity[, "DayType"] <- NA
View(newActivity)
sum(is.na(newActivity))
View(newActivity)
newActivity[, "DayType"] <- NA
for (date in newActivity) {
newActivity$DayType <- (as.POSIXlt(newActivity$date)$wday %% 6  == 0)
}
newActivity$DayType <- factor(newActivity$DayType, labels = c("weekday", "weekend"))
newActivity$date <- as.Date(newActivity$date)
for (date in newActivity) {
newActivity$DayType <- (as.POSIXlt(newActivity$date)$wday %% 6  == 0)
}
newActivity$DayType <- factor(newActivity$DayType, labels = c("weekday", "weekend"))
View(newActivity)
library(lattice)
library(quantmod)
getSymbols("^GSPC")
str(GSPC)
xyplot(newActivity)
par(mfrow = c(2,1))
plot(newActivity, type = "l")
newDaily <- aggregate(steps ~ interval, data = newActivity, subset = newActivity$DayType, FUN = mean)
View(newDaily)
View(newActivity)
newDaily <- aggregate(steps ~ interval, data = newActivity, FUN = mean)
View(newDaily)
for (type in c("weekend", "weekday")) {
newDaily <- aggregate(steps ~ interval, data = newActivity, subset = newActivity$DayType ==
type, FUN = mean)
plot(steps.type, type = "l", main = type)
}
for (type in c("weekend", "weekday")) {
newDaily <- aggregate(steps ~ interval, data = newActivity, subset = newActivity$DayType ==
type, FUN = mean)
plot(newDaily, type = "l", main = type)
}
par(mfrow = c(2,1))
for (type in c("weekend", "weekday")) {
newDaily <- aggregate(steps ~ interval, data = newActivity, subset = newActivity$DayType ==
type, FUN = mean)
plot(n
}
par(mfrow = c(2,1))
for (type in c("weekend", "weekday")) {
newDaily <- aggregate(steps ~ interval, data = newActivity, subset = newActivity$DayType ==
type, FUN = mean)
plot(newDaily, type = "l", main = type)
}
for (type in c("weekend", "weekday")) {
newDaily <- aggregate(steps ~ interval, data = newActivity, subset = newActivity$DayType ==
type, FUN = mean)
}
View(newDaily)
